name: JEFIT Daily Sync (Playwright login -> scrape -> JSON)

on:
  schedule:
    - cron: "00 3 * * *"   # daily 05:50 UTC
  workflow_dispatch:
    inputs:
      date:
        description: "Date to fetch (YYYY-MM-DD). Leave blank to fetch yesterday (Europe/London)."
        required: false
        default: ""

permissions:
  contents: write

jobs:
  jefit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # --- Node + Playwright
      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Playwright
        run: |
          npm init -y
          npm i playwright@1
          npx playwright install --with-deps chromium

      - name: Login and fetch history (robust selectors + artefacts)
        env:
          JEFIT_USERNAME: ${{ secrets.JEFIT_USERNAME }}
          JEFIT_PASSWORD: ${{ secrets.JEFIT_PASSWORD }}
          INPUT_DATE: ${{ github.event.inputs.date }}
        run: |
          node - <<'JS'
          const fs = require('fs');
          const path = require('path');
          const { chromium } = require('playwright');

          function z(n){return `${n}`.padStart(2,'0')}
          function ymd(d){return `${d.getFullYear()}-${z(d.getMonth()+1)}-${z(d.getDate())}`}

          const envDate = (process.env.INPUT_DATE || '').trim();
          const now = new Date();
          const yest = new Date(now.getTime() - 24*3600*1000);
          const dateStr = envDate || ymd(yest);

          (async () => {
            fs.mkdirSync('docs/jefit/raw', { recursive: true });

            const browser = await chromium.launch({
              headless: true,
              args: [
                '--no-sandbox',
                '--disable-dev-shm-usage',
                '--disable-blink-features=AutomationControlled'
              ]
            });
            const ctx = await browser.newContext({
              userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome Safari',
              locale: 'en-GB',
              viewport: { width: 1366, height: 768 }
            });
            await ctx.addInitScript(() => {
              Object.defineProperty(navigator, 'webdriver', { get: () => undefined });
            });

            const page = await ctx.newPage();

            // 1) Go to login
            await page.goto('https://www.jefit.com/login/', { waitUntil: 'domcontentloaded', timeout: 45000 });
            fs.writeFileSync('docs/jefit/raw/login-page.html', await page.content());
            await page.screenshot({ path: 'docs/jefit/raw/login-loaded.png', fullPage: true });

            // Cookie banner (common OneTrust id)
            const consent = await page.$('#onetrust-accept-btn-handler');
            if (consent) { try { await consent.click({ timeout: 2000 }); } catch(_){} }

            // Some flows hide email form behind a “Sign in with Email” button/link
            const emailOpeners = [
              'button:has-text("Sign in with Email")',
              'button:has-text("Log in with Email")',
              'button:has-text("Continue with Email")',
              'a:has-text("Sign in with Email")',
              'a:has-text("Log in with Email")',
              'a:has-text("Continue with Email")'
            ];
            for (const sel of emailOpeners) {
              const btn = await page.$(sel);
              if (btn) {
                try {
                  await Promise.all([
                    page.waitForLoadState('domcontentloaded', { timeout: 30000 }),
                    btn.click({ timeout: 3000 })
                  ]);
                  break;
                } catch(_) {}
              }
            }

            // 2) Wait for actual inputs rendered by Next.js
            const emailSel = 'input[type="email"], input[name="email"], input[name="username"], #email';
            const passSel  = 'input[type="password"], input[name="password"], #password';
            await page.waitForSelector(emailSel, { timeout: 30000 });
            await page.waitForSelector(passSel,  { timeout: 30000 });

            // Fill and submit
            await page.fill(emailSel, process.env.JEFIT_USERNAME || '');
            await page.fill(passSel,  process.env.JEFIT_PASSWORD || '');
            const submit = await page.$('button[type="submit"], input[type="submit"], button:has-text("Log in"), button:has-text("Sign in")');
            if (submit) {
              await Promise.all([
                page.waitForLoadState('networkidle', { timeout: 45000 }),
                submit.click()
              ]);
            } else {
              await Promise.all([
                page.waitForLoadState('networkidle', { timeout: 45000 }),
                page.press(passSel, 'Enter')
              ]);
            }

            // 3) Navigate to history page for the target date
            const histUrl = `https://www.jefit.com/my-jefit/progress/history?date=${dateStr}`;
            await page.goto(histUrl, { waitUntil: 'domcontentloaded', timeout: 45000 });
            await page.waitForLoadState('networkidle', { timeout: 45000 }).catch(()=>{});
            fs.writeFileSync(`docs/jefit/raw/history-${dateStr}.html`, await page.content());
            await page.screenshot({ path: `docs/jefit/raw/history-${dateStr}.png`, fullPage: true });

            // Save cookies for debugging
            const cookiesPath = 'docs/jefit/raw/cookies.json';
            fs.mkdirSync(path.dirname(cookiesPath), { recursive: true });
            fs.writeFileSync(cookiesPath, JSON.stringify(await ctx.cookies(), null, 2));

            await browser.close();
          })().catch(e => { console.error(e); process.exit(1); });
          JS

      # --- Python parser
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install beautifulsoup4 lxml

      - name: Parse saved HTML -> JSON
        env:
          INPUT_DATE: ${{ github.event.inputs.date }}
        run: |
          python - << 'PY'
          import os, re, json
          from datetime import datetime, timedelta
          from pathlib import Path
          from bs4 import BeautifulSoup

          def ymd(d): return d.strftime('%Y-%m-%d')
          env_date = (os.environ.get('INPUT_DATE') or '').strip()
          date_str = env_date or ymd(datetime.utcnow() - timedelta(days=1))

          raw = Path(f"docs/jefit/raw/history-{date_str}.html")
          if not raw.exists():
            print("No history HTML saved (login likely blocked)."); raise SystemExit(1)

          html = raw.read_text(encoding='utf-8', errors='ignore')
          soup = BeautifulSoup(html, 'lxml')

          def clean(t): return re.sub(r"\s+"," ", (t or "").strip())
          def to_float(x):
            if x is None: return None
            s = re.sub(r"[^\d\.\-]", "", str(x))
            try: return float(s) if s else None
            except: return None

          workouts, tables = [], []
          for table in soup.find_all("table"):
            ths = [clean(th.get_text()) for th in table.find_all("th")]
            if not ths:
              first = table.find("tr")
              if first:
                ths = [clean(td.get_text()) for td in first.find_all(["th","td"])]
            header = " ".join(ths).lower()
            if any(k in header for k in ["set","reps"]) and any(k in header for k in ["weight","kg","lb"]):
              tables.append(table)

          def find_exercise_name(node):
            cur=node
            for _ in range(6):
              cur = cur.find_previous(["h1","h2","h3","h4","strong","b","div","span"])
              if not cur: break
              txt = clean(cur.get_text())
              if txt and len(txt) <= 80 and not re.search(r"(set|reps|weight|workout|date|history|edit|delete)", txt, re.I):
                return txt
            return "Exercise"

          for table in tables:
            name = find_exercise_name(table)
            rows = table.find_all("tr")
            if not rows: continue

            def is_header(tr):
              cells = [clean(td.get_text()) for td in tr.find_all(["th","td"])]
              t = " ".join(cells).lower()
              return ("set" in t and "rep" in t) or ("weight" in t)

            start = 1 if rows and is_header(rows[0]) else 0
            sets=[]
            for tr in rows[start:]:
              tds = [clean(td.get_text()) for td in tr.find_all("td")]
              if not tds: continue
              reps=None; weight=None; notes=None
              if len(tds)>=2: reps = to_float(tds[1])
              if len(tds)>=3: weight = to_float(tds[2])
              if len(tds)>=4:
                n = tds[-1]
                if not re.match(r"^\d+(\.\d+)?\s*(kg|lb)?$", n):
                  notes = n or None
              s={}
              if reps is not None: s["reps"]=int(reps)
              if weight is not None: s["weight"]=weight
              if notes: s["notes"]=notes
              if s: sets.append(s)

            if sets:
              tv=0.0; any_tv=False
              for s in sets:
                if s.get("weight") is not None and s.get("reps") is not None:
                  tv += float(s["weight"]) * int(s["reps"]); any_tv=True
              workouts.append({"exercise": name, "sets": sets, "total_volume": round(tv,2) if any_tv else None})

          day_obj = {"date": date_str, "workouts": workouts, "source": "jefit_playwright"}
          Path("docs/jefit/days").mkdir(parents=True, exist_ok=True)
          Path(f"docs/jefit/days/{date_str}.json").write_text(json.dumps(day_obj, indent=2), encoding='utf-8')
          Path("docs/jefit/daily.json").write_text(json.dumps(day_obj, indent=2), encoding='utf-8')

          hist_p = Path("docs/jefit/history.json")
          hist=[]
          if hist_p.exists():
            try: hist=json.loads(hist_p.read_text())
            except: hist=[]
          hist=[h for h in hist if h.get("date") != date_str]
          hist.append(day_obj)
          hist = sorted(hist, key=lambda x: x["date"], reverse=True)[:180]
          hist_p.write_text(json.dumps(hist, indent=2), encoding='utf-8')
          print(json.dumps({"date": date_str, "exercises": len(workouts)}))
          PY

      - name: Configure Git user
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit JEFIT files
        run: |
          if [[ -n "$(git status --porcelain docs/jefit 2>/dev/null || true)" ]]; then
            git add docs/jefit
            git commit -m "chore: jefit day sync (playwright)"
            git push
          else
            echo "No changes to commit."
          fi