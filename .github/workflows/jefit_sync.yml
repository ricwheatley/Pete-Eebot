name: JEFIT Sync (history scraper)

on:
  workflow_dispatch:
    inputs:
      date:
        description: "Date to fetch (YYYY-MM-DD). Leave blank for today."
        required: false
        default: ""
  schedule:
    # 18:40 UK ~ 17:40 UTC in winter; adjust to your preference
    - cron: "40 17 * * *"

permissions:
  contents: write

jobs:
  scrape:
    runs-on: ubuntu-latest
    env:
      # required repo secrets
      JEFIT_USERNAME: ${{ secrets.JEFIT_USERNAME }}
      JEFIT_PASSWORD: ${{ secrets.JEFIT_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Git user
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Playwright (Chromium only)
        run: |
          npm -y init >/dev/null 2>&1 || true
          npm i playwright@1
          npx playwright install --with-deps chromium

      - name: Scrape JEFIT history (stay on jefit.com)
        env:
          REQ_DATE: ${{ github.event.inputs.date }}
        run: |
          node <<'NODE'
          const fs = require('fs');
          const path = require('path');
          const { chromium, devices } = require('playwright');

          (async () => {
            const username = process.env.JEFIT_USERNAME || "";
            const password = process.env.JEFIT_PASSWORD || "";
            if (!username || !password) {
              console.error("❌ Missing JEFIT_USERNAME or JEFIT_PASSWORD secrets");
              process.exit(1);
            }

            // Resolve date
            function pad(n){return String(n).padStart(2,'0')}
            const inDate = (process.env.REQ_DATE || "").trim();
            const today = new Date();
            const yyyy = today.getFullYear(), mm = pad(today.getMonth()+1), dd = pad(today.getDate());
            const dateStr = /^\d{4}-\d{2}-\d{2}$/.test(inDate) ? inDate : `${yyyy}-${mm}-${dd}`;

            // Target URLs - single host (no www)
            const BASE = 'https://jefit.com';
            const LOGIN_URL = `${BASE}/login/`;
            const HIST_URL  = `${BASE}/my-jefit/progress/history?date=${dateStr}`;

            // Output paths
            const rawDir = path.join('docs','jefit','raw');
            fs.mkdirSync(rawDir, { recursive: true });
            const outFile = path.join(rawDir, `history-${dateStr}.html`);
            const cookieDump = path.join(rawDir, 'cookies.json');

            const browser = await chromium.launch({ headless: true });
            const context = await browser.newContext({
              userAgent: devices['Desktop Chrome'].userAgent,
              viewport: { width: 1366, height: 900 }
            });
            const page = await context.newPage();

            // Helper: wait network idle-ish
            async function settle() {
              try { await page.waitForLoadState('networkidle', { timeout: 8000 }); } catch {}
            }

            console.log('➡️  Going to login…', LOGIN_URL);
            await page.goto(LOGIN_URL, { waitUntil: 'domcontentloaded' });
            await settle();

            // Fill credentials (selectors kept tolerant to HTML changes)
            const userSel = 'input[name="username"], input[id*="username"], input[placeholder*="Username" i], input[placeholder*="email" i]';
            const passSel = 'input[name="password"], input[id*="password"], input[type="password"]';
            const btnSel  = 'button:has-text("Log In"), button:has-text("Sign In"), input[type="submit"]';

            // Ensure fields are present
            await page.waitForSelector(userSel, { timeout: 15000 });
            await page.fill(userSel, username, { timeout: 10000 });
            await page.fill(passSel, password, { timeout: 10000 });

            // Click login
            const clickTarget = await page.$(btnSel);
            if (clickTarget) {
              await clickTarget.click({ timeout: 10000 });
            } else {
              // fallback: press Enter in password
              await page.press(passSel, 'Enter').catch(()=>{});
            }
            await settle();

            // If still on login, try one more gentle nudge
            const stillOnLogin = await page.$('h1:has-text("Log In")');
            if (stillOnLogin) {
              await page.press(passSel, 'Enter').catch(()=>{});
              await settle();
            }

            // Small cookie diagnostic — helps confirm same-host auth
            const jar = await context.cookies();
            const diag = {
              count: jar.length,
              sample: jar.slice(0, 10).map(c => ({ domain: c.domain, name: c.name, httpOnly: c.httpOnly, secure: c.secure }))
            };
            fs.writeFileSync(cookieDump, JSON.stringify(diag, null, 2));
            console.log('🍪 cookie sample:', diag);

            // Navigate to history (same host)
            console.log('➡️  Visiting history:', HIST_URL);
            await page.goto(HIST_URL, { waitUntil: 'domcontentloaded' });
            await settle();

            // If we still got bounced to login, bail with a helpful message
            const loginMarker = await page.$('h1:has-text("Log In")');
            if (loginMarker) {
              console.error('❌ Looks like we are still on the login page. Likely auth cookie mismatch.');
              console.error('    Check that both login and history are on the SAME host (we use jefit.com).');
              console.error('    See cookies.json for a quick diagnostic.');
              await browser.close();
              process.exit(2);
            }

            // Save page HTML
            const html = await page.content();
            fs.writeFileSync(outFile, html);
            console.log(`✅ Saved: ${outFile}`);

            await browser.close();
            process.exit(0);
          })().catch(err => {
            console.error(err);
            process.exit(1);
          });
          NODE

      - name: Commit scraped page
        run: |
          if [[ -n "$(git status --porcelain docs/jefit/raw || true)" ]]; then
            git add docs/jefit/raw
            git commit -m "chore(jefit): snapshot history page"
            git push
          else
            echo "No changes to commit."
          fi
