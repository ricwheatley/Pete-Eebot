name: JEFIT Daily Sync (Playwright login -> scrape -> JSON)

on:
  schedule:
    - cron: "50 5 * * *"    # daily 05:50 UTC
  workflow_dispatch:
    inputs:
      date:
        description: "Date to fetch (YYYY-MM-DD). Blank = yesterday (Europe/London)."
        required: false
        default: ""

permissions:
  contents: write

jobs:
  jefit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Playwright
        run: |
          npm init -y
          npm i playwright@1
          npx playwright install --with-deps chromium

      - name: Fetch JEFIT page via headless login
        env:
          JEFIT_USERNAME: ${{ secrets.JEFIT_USERNAME }}
          JEFIT_PASSWORD: ${{ secrets.JEFIT_PASSWORD }}
          INPUT_DATE: ${{ github.event.inputs.date }}
        run: |
          node - <<'JS'
          const fs = require('fs');
          const path = require('path');
          const { chromium } = require('playwright');

          function z(n){return `${n}`.padStart(2,'0')}
          function ymd(d){return `${d.getFullYear()}-${z(d.getMonth()+1)}-${z(d.getDate())}`}

          const envDate = (process.env.INPUT_DATE || '').trim();
          const now = new Date();
          const yest = new Date(now.getTime() - 24*3600*1000);
          const dateStr = envDate || ymd(yest);

          (async () => {
            const browser = await chromium.launch();
            const ctx = await browser.newContext({
              userAgent: 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome Safari',
              locale: 'en-GB'
            });
            const page = await ctx.newPage();

            // Ensure target folders exist BEFORE any writes
            fs.mkdirSync('docs/jefit/raw', { recursive: true });

            // 1) Login page
            await page.goto('https://www.jefit.com/login/', { waitUntil: 'domcontentloaded' });
            fs.writeFileSync('docs/jefit/raw/login-page.html', await page.content());

            // Find fields (adjust if needed after first run)
            const userSel = (await page.$('input[name="email"]')) ? 'input[name="email"]'
                           : (await page.$('input[name="username"]')) ? 'input[name="username"]'
                           : 'input[type="email"]';
            const passSel = (await page.$('input[type="password"]')) ? 'input[type="password"]' : null;

            if (userSel && passSel) {
              await page.fill(userSel, process.env.JEFIT_USERNAME || '');
              await page.fill(passSel, process.env.JEFIT_PASSWORD || '');
              const submitBtn = await page.$('button[type="submit"], input[type="submit"], button:has-text("Log in"), button:has-text("Sign in")');
              if (submitBtn) {
                await Promise.all([page.waitForLoadState('networkidle'), submitBtn.click()]);
              } else {
                await Promise.all([page.waitForLoadState('networkidle'), page.press(passSel, 'Enter')]);
              }
            }

            // 2) Navigate to target history page
            const histUrl = `https://www.jefit.com/my-jefit/progress/history?date=${dateStr}`;
            await page.goto(histUrl, { waitUntil: 'networkidle' });
            fs.writeFileSync(`docs/jefit/raw/history-${dateStr}.html`, await page.content());

            // 3) Save cookies (ensure directory exists first)
            const cookiesPath = 'docs/jefit/raw/cookies.json';
            fs.mkdirSync(path.dirname(cookiesPath), { recursive: true });
            const cookies = await ctx.cookies();
            fs.writeFileSync(cookiesPath, JSON.stringify(cookies, null, 2));

            await browser.close();
          })().catch(e => { console.error(e); process.exit(1); });
          JS

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install beautifulsoup4 lxml

      - name: Parse saved HTML -> JSON
        env:
          INPUT_DATE: ${{ github.event.inputs.date }}
        run: |
          python - << 'PY'
          import os, re, json
          from datetime import datetime, timedelta
          from pathlib import Path
          from bs4 import BeautifulSoup

          def ymd(d): return d.strftime('%Y-%m-%d')

          env_date = (os.environ.get('INPUT_DATE') or '').strip()
          if env_date:
            date_str = env_date
          else:
            date_str = ymd(datetime.utcnow() - timedelta(days=1))

          raw_path = Path(f"docs/jefit/raw/history-{date_str}.html")
          if not raw_path.exists():
            print("Missing raw HTML:", raw_path); raise SystemExit(1)

          html = raw_path.read_text(encoding='utf-8', errors='ignore')
          soup = BeautifulSoup(html, 'lxml')

          def clean(t): return re.sub(r"\s+"," ", (t or "").strip())
          def to_float(x):
            if x is None: return None
            s = re.sub(r"[^\d\.\-]", "", str(x))
            try: return float(s) if s else None
            except: return None

          workouts = []
          tables = []
          for table in soup.find_all("table"):
            ths = [clean(th.get_text()) for th in table.find_all("th")]
            if not ths:
              first = table.find("tr")
              if first:
                ths = [clean(td.get_text()) for td in first.find_all(["th","td"])]
            header = " ".join(ths).lower()
            if any(k in header for k in ["set","reps"]) and any(k in header for k in ["weight","kg","lb"]):
              tables.append(table)

          def find_exercise_name(node):
            cur = node
            for _ in range(6):
              cur = cur.find_previous(["h1","h2","h3","h4","strong","b","div","span"])
              if not cur: break
              txt = clean(cur.get_text())
              if txt and len(txt) <= 80 and not re.search(r"(set|reps|weight|workout|date|history|edit|delete)", txt, re.I):
                return txt
            return "Exercise"

          for table in tables:
            name = find_exercise_name(table)
            rows = table.find_all("tr")
            if not rows: continue

            def is_header(tr):
              cells = [clean(td.get_text()) for td in tr.find_all(["th","td"])]
              t = " ".join(cells).lower()
              return ("set" in t and "rep" in t) or ("weight" in t)

            start = 1 if rows and is_header(rows[0]) else 0
            sets=[]
            for tr in rows[start:]:
              tds = [clean(td.get_text()) for td in tr.find_all("td")]
              if not tds: continue
              reps=None; weight=None; notes=None
              if len(tds) >= 2: reps = to_float(tds[1])
              if len(tds) >= 3: weight = to_float(tds[2])
              if len(tds) >= 4:
                n = tds[-1]
                if not re.match(r"^\d+(\.\d+)?\s*(kg|lb)?$", n):
                  notes = n or None
              s={}
              if reps is not None: s["reps"]=int(reps)
              if weight is not None: s["weight"]=weight
              if notes: s["notes"]=notes
              if s: sets.append(s)

            if sets:
              total_volume=None
              if any("weight" in s for s in sets) and any("reps" in s for s in sets):
                tv=0.0
                for s in sets:
                  if "weight" in s and "reps" in s and s["weight"] is not None and s["reps"] is not None:
                    tv += float(s["weight"]) * int(s["reps"])
                total_volume=round(tv,2)
              workouts.append({"exercise": name, "sets": sets, "total_volume": total_volume})

          day_obj = {"date": date_str, "workouts": workouts, "source": "jefit_playwright"}
          Path("docs/jefit/days").mkdir(parents=True, exist_ok=True)
          Path(f"docs/jefit/days/{date_str}.json").write_text(json.dumps(day_obj, indent=2), encoding="utf-8")
          Path("docs/jefit/daily.json").write_text(json.dumps(day_obj, indent=2), encoding="utf-8")

          # history upsert
          hist_p = Path("docs/jefit/history.json")
          hist=[]
          if hist_p.exists():
            try: hist=json.loads(hist_p.read_text())
            except: hist=[]
          hist=[h for h in hist if h.get("date") != date_str]
          hist.append(day_obj)
          hist = sorted(hist, key=lambda x: x["date"], reverse=True)[:180]
          hist_p.write_text(json.dumps(hist, indent=2), encoding="utf-8")

          print(json.dumps({"date": date_str, "exercises": len(workouts)}))
          PY

      - name: Configure Git user
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit JEFIT files
        run: |
          if [[ -n "$(git status --porcelain docs/jefit 2>/dev/null || true)" ]]; then
            git add docs/jefit
            git commit -m "chore: jefit day sync (playwright)"
            git push
          else
            echo "No changes to commit."
          fi