name: Withings OAuth Helper

on:
  workflow_dispatch:
    inputs:
      client_id_for_url:
        description: "Paste your Client ID here to build the clickable link (avoids masking)."
        required: true
      redirect_uri_for_url:
        description: "Paste your Redirect URI here for the link (must match your Withings app)."
        required: true
      code:
        description: "Leave blank to generate the auth link. Paste the code here to get your token."
        required: false

permissions:
  contents: read

jobs:
  oauth:
    runs-on: ubuntu-latest
    steps:
      # This step validates the inputs for the link and passes them to the next step.
      - name: Resolve Inputs for Link
        id: resolve
        run: |
          set -euo pipefail

          # Validate the inputs needed to build the unmasked URL
          if [ -z "${{ github.event.inputs.client_id_for_url }}" ] || [ -z "${{ github.event.inputs.redirect_uri_for_url }}" ]; then
            echo "Error: The 'client_id_for_url' and 'redirect_uri_for_url' inputs are required to generate the link." >&2
            exit 1
          fi
          
          # URL-encode the redirect URI from the input for use in the link's query string
          REDIRECT_ENC=$(python3 -c "import urllib.parse; print(urllib.parse.quote('''${{ github.event.inputs.redirect_uri_for_url }}''', safe=''))")

          # Set outputs for the next step
          {
            echo "link_client_id=${{ github.event.inputs.client_id_for_url }}"
            echo "link_redirect_uri=${{ github.event.inputs.redirect_uri_for_url }}"
            echo "link_redirect_enc=$REDIRECT_ENC"
          } >> "$GITHUB_OUTPUT"

      # This step generates the link or exchanges the code for a token.
      - name: Generate Link or Exchange Code
        env:
          # Pull in the unmasked values from the previous step for the link
          LINK_CLIENT_ID:     ${{ steps.resolve.outputs.link_client_id }}
          LINK_REDIRECT_URI:  ${{ steps.resolve.outputs.link_redirect_uri }}
          LINK_REDIRECT_ENC:  ${{ steps.resolve.outputs.link_redirect_enc }}

          # Pull in the user's pasted code
          CODE: ${{ github.event.inputs.code }}

          # 🔒 Pull in your SECURE credentials for the backend API call
          SECRET_CLIENT_ID:     ${{ secrets.WITHINGS_CLIENT_ID }}
          SECRET_CLIENT_SECRET: ${{ secrets.WITHINGS_CLIENT_SECRET }}
          SECRET_REDIRECT_URI:  ${{ secrets.WITHINGS_REDIRECT_URI }}
        run: |
          set -euo pipefail
          SCOPES="user.metrics,user.activity,user.info"

          # --- Mode 1: Generate the Authorisation Link ---
          if [ -z "$CODE" ]; then
            AUTH_URL="https://account.withings.com/oauth2_user/authorize2?response_type=code&client_id=${LINK_CLIENT_ID}&state=github_actions&scope=${SCOPES}&redirect_uri=${LINK_REDIRECT_ENC}"
            
            {
              echo "## Withings Authorisation"
              echo ""
              echo "Tap the link below to authorise the application. You will be redirected to a page showing a `code`."
              echo ""
              echo "### Authorisation Link"
              echo "<a href=\"${AUTH_URL}\">${AUTH_URL}</a>"
              echo ""
              echo "**After authorising, re-run this workflow and paste the `code` from your browser into the `code` input box.**"
            } >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi

          # --- Mode 2: Exchange the Code for a Token ---
          echo "Exchanging code for tokens..."

          # Validate that secrets are set before making the API call
          if [ -z "$SECRET_CLIENT_ID" ] || [ -z "$SECRET_CLIENT_SECRET" ] || [ -z "$SECRET_REDIRECT_URI" ]; then
            echo "Error: The secrets WITHINGS_CLIENT_ID, WITHINGS_CLIENT_SECRET, and WITHINGS_REDIRECT_URI must be set in repository settings for the token exchange to work." >&2
            exit 1
          fi

          sudo apt-get update -y >/dev/null && sudo apt-get install -y jq >/dev/null

          # Make the secure API call using the secrets
          RESP=$(curl -sS -X POST "https://wbsapi.withings.net/v2/oauth2" \
            --data-urlencode "action=requesttoken" \
            --data-urlencode "grant_type=authorization_code" \
            --data-urlencode "client_id=${SECRET_CLIENT_ID}" \
            --data-urlencode "client_secret=${SECRET_CLIENT_SECRET}" \
            --data-urlencode "code=${CODE}" \
            --data-urlencode "redirect_uri=${SECRET_REDIRECT_URI}")

          # Check the API response for errors
          if [ "$(echo "$RESP" | jq -r '.status')" != "0" ]; then
            {
              echo "## ❌ Exchange Failed"
              echo "The API returned an error. Common causes include an expired/reused code, a mismatch between your secret Redirect URI and the one in your Withings app, or missing permissions."
              echo ""
              echo "**API Response:**"
              echo '```json'
              echo "$RESP" | jq .
              echo '```'
            } >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi

          # On success, extract and display the refresh token
          REFRESH_TOKEN=$(echo "$RESP" | jq -r '.body.refresh_token')
          {
            echo "## ✅ Success! Save Your Refresh Token"
            echo ""
            echo "Store this value as a new repository secret, for example \`WITHINGS_REFRESH_TOKEN\`, to use in your application."
            echo '```'
            echo "$REFRESH_TOKEN"
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"
