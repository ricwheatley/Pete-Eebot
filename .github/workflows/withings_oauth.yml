name: Withings OAuth Helper

on:
  workflow_dispatch:
    inputs:
      code:
        description: "Leave blank to generate the authorisation link. Paste the short-lived code here to exchange it for a refresh token."
        required: false
      scopes:
        description: "Optional comma-separated scopes. Default: user.metrics,user.activity. Do not include user.info unless you have an SDK contract."
        required: false
        default: "user.metrics,user.activity"

permissions:
  contents: read

jobs:
  oauth:
    runs-on: ubuntu-latest

    env:
      # Public config from Repository Variables (Settings -> Variables -> Actions)
      CLIENT_ID:    ${{ vars.WITHINGS_CLIENT_ID }}
      REDIRECT_URI: ${{ vars.WITHINGS_REDIRECT_URI }}

      # Private credential from Secrets
      CLIENT_SECRET: ${{ secrets.WITHINGS_CLIENT_SECRET }}

      # Inputs
      CODE:   ${{ github.event.inputs.code }}
      SCOPES: ${{ github.event.inputs.scopes }}

    steps:
      - name: Validate configuration
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${CLIENT_ID:-}" ] || [ -z "${REDIRECT_URI:-}" ]; then
            echo "## ❌ Missing repository Variables" > "$GITHUB_STEP_SUMMARY"
            echo "- Set WITHINGS_CLIENT_ID and WITHINGS_REDIRECT_URI under Settings -> Variables -> Actions (Variables, not Secrets)." >> "$GITHUB_STEP_SUMMARY"
            echo "- Set WITHINGS_CLIENT_SECRET under Settings -> Secrets and variables -> Actions -> Secrets." >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi
          if printf '%s' "${SCOPES,,}" | grep -q 'user.info'; then
            echo "## ⚠️ Scope check" >> "$GITHUB_STEP_SUMMARY"
            echo "The 'user.info' scope is restricted and typically fails without an SDK contract. Consider removing it." >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Generate authorisation link (when CODE is empty)
        if: ${{ env.CODE == '' }}
        shell: bash
        run: |
          set -euo pipefail

          # Default scopes if form left blank
          SCOPES="${SCOPES:-user.metrics,user.activity}"

          # URL-encode the redirect URI
          REDIRECT_ENC="$(python3 -c 'import os,urllib.parse as u; print(u.quote(os.environ["REDIRECT_URI"], safe=""))')"

          # Random state for CSRF protection
          STATE="$(python3 -c 'import secrets; print(secrets.token_urlsafe(24))')"

          AUTH_URL="https://account.withings.com/oauth2_user/authorize2?response_type=code&client_id=${CLIENT_ID}&state=${STATE}&scope=${SCOPES}&redirect_uri=${REDIRECT_ENC}"

          {
            echo "## Withings authorisation"
            echo
            echo "- Scopes: \`${SCOPES}\`"
            echo "- Redirect URI: \`${REDIRECT_URI}\`"
            echo
            echo "### Authorisation link"
            echo "${AUTH_URL}"
            echo
            echo "**Important:** The authorisation code is only valid for roughly 30 seconds. Approve the app, copy the code from your redirect page, then immediately re-run this workflow with the code pasted into the input."
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Exchange code for refresh token (when CODE is provided)
        if: ${{ env.CODE != '' }}
        shell: bash
        run: |
          set -euo pipefail

          if [ -z "${CLIENT_SECRET:-}" ]; then
            echo "## ❌ Missing secret" > "$GITHUB_STEP_SUMMARY"
            echo "Set WITHINGS_CLIENT_SECRET under Settings -> Secrets and variables -> Actions -> Secrets." >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi

          sudo apt-get update -y >/dev/null
          sudo apt-get install -y jq >/dev/null

          # Perform token exchange against the v2 endpoint
          RESP="$(curl -sS -X POST "https://wbsapi.withings.net/v2/oauth2" \
            --data-urlencode "action=requesttoken" \
            --data-urlencode "grant_type=authorization_code" \
            --data-urlencode "client_id=${CLIENT_ID}" \
            --data-urlencode "client_secret=${CLIENT_SECRET}" \
            --data-urlencode "code=${CODE}" \
            --data-urlencode "redirect_uri=${REDIRECT_URI}")"

          STATUS="$(printf '%s' "$RESP" | jq -r '.status // empty')"

          if [ "$STATUS" != "0" ]; then
            {
              echo "## ❌ Token exchange failed"
              echo
              echo "Common causes:"
              echo "- The code expired, re-authorise and paste the new code within ~30 seconds."
              echo "- Redirect URI mismatch, it must match exactly what is registered in Withings, including protocol and trailing slash."
              echo "- Restricted scope, remove 'user.info' unless you have an SDK contract."
              echo
              echo "### Raw response"
              echo '```json'
              printf '%s' "$RESP" | jq .
              echo '```'
            } >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi

          REFRESH_TOKEN="$(printf '%s' "$RESP" | jq -r '.body.refresh_token // empty')"
          EXPIRES_IN="$(printf '%s' "$RESP" | jq -r '.body.expires_in // empty')"

          {
            echo "## ✅ Success, save your refresh token"
            echo
            echo "Create or update a Secret named \`WITHINGS_REFRESH_TOKEN\` with the value below."
            echo
            echo '```'
            printf '%s\n' "$REFRESH_TOKEN"
            echo '```'
            echo
            echo "_Access token preview:_ expires in ${EXPIRES_IN}s. For automation, prefer using the refresh token in your daily sync workflow."
          } >> "$GITHUB_STEP_SUMMARY"
