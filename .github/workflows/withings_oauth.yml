name: Withings OAuth Helper (vars only)

on:
  workflow_dispatch:
    inputs:
      code:
        description: "Paste the ?code=... from your redirect page (leave blank to generate the auth URL)"
        required: false
        default: ""
      scope:
        description: "Scopes (comma-separated, e.g. user.metrics,user.activity)"
        required: false
        default: "user.metrics,user.activity"

permissions:
  contents: read

jobs:
  oauth:
    runs-on: ubuntu-latest
    steps:
      - name: Resolve variables
        id: res
        shell: bash
        env:
          VAR_CLIENT_ID:     ${{ vars.WITHINGS_CLIENT_ID_FOR_URL }}
          VAR_REDIRECT_URI:  ${{ vars.WITHINGS_REDIRECT_URI_FOR_URL }}
          VAR_CLIENT_SECRET: ${{ vars.WITHINGS_CLIENT_SECRET_FOR_EXCHANGE }}
          VAR_SCOPE:         ${{ github.event.inputs.scope }}
        run: |
          set -euo pipefail

          if [ -z "${VAR_CLIENT_ID}" ] || [ -z "${VAR_REDIRECT_URI}" ] || [ -z "${VAR_CLIENT_SECRET}" ]; then
            echo "Missing variables. Please set all of:
              - WITHINGS_CLIENT_ID_FOR_URL
              - WITHINGS_REDIRECT_URI_FOR_URL
              - WITHINGS_CLIENT_SECRET_FOR_EXCHANGE" >&2
            exit 1
          fi

          # Tidy the redirect and validate
          REDIRECT_RAW="$(printf '%s' "$VAR_REDIRECT_URI" | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/^s:\/\//https:\/\//')"
          if ! echo "$REDIRECT_RAW" | grep -qi '^http'; then
            echo "Redirect must start with http/https. Got: $REDIRECT_RAW" >&2
            exit 1
          fi

          # URL-encode the redirect (safe= empty so everything is encoded)
          REDIRECT_ENC="$(python3 -c 'import urllib.parse,sys; print(urllib.parse.quote(sys.argv[1], safe=""))' "$REDIRECT_RAW")"

          echo "client_id=${VAR_CLIENT_ID}"       >> "$GITHUB_OUTPUT"
          echo "redirect_raw=${REDIRECT_RAW}"     >> "$GITHUB_OUTPUT"
          echo "redirect_enc=${REDIRECT_ENC}"     >> "$GITHUB_OUTPUT"
          echo "scope=${VAR_SCOPE}"               >> "$GITHUB_OUTPUT"
          echo "client_secret=${VAR_CLIENT_SECRET}" >> "$GITHUB_OUTPUT"

      - name: Authorise or Exchange (vars only)
        shell: bash
        env:
          CODE:            ${{ github.event.inputs.code }}
          CLIENT_ID:       ${{ steps.res.outputs.client_id }}
          REDIRECT_RAW:    ${{ steps.res.outputs.redirect_raw }}
          REDIRECT_ENC:    ${{ steps.res.outputs.redirect_enc }}
          SCOPE:           ${{ steps.res.outputs.scope }}
          CLIENT_SECRET:   ${{ steps.res.outputs.client_secret }}
        run: |
          set -euo pipefail

          AUTH_URL="https://account.withings.com/oauth2_user/authorize2?response_type=code&client_id=${CLIENT_ID}&state=ric_state_123&scope=${SCOPE}&redirect_uri=${REDIRECT_ENC}"

          if [ -z "${CODE}" ]; then
            {
              echo "## Withings Authorisation"
              echo ""
              echo "- Client ID (link): \`${CLIENT_ID}\`"
              echo "- Redirect (exact): \`${REDIRECT_RAW}\`"
              echo "- Scopes: \`${SCOPE}\`"
              echo ""
              echo "Tap this link to authorise:"
              echo ""
              echo "<a href=\"${AUTH_URL}\">${AUTH_URL}</a>"
              echo ""
              echo "After approving, your redirect page shows a **code**."
              echo "Re-run this workflow and paste that code into the input."
            } >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi

          echo "Exchanging code for tokens (vars only)…"
          sudo apt-get update -y >/dev/null
          sudo apt-get install -y jq >/dev/null

          RESP="$(curl -sS -X POST "https://wbsapi.withings.net/v2/oauth2" \
            --data-urlencode "action=requesttoken" \
            --data-urlencode "grant_type=authorization_code" \
            --data-urlencode "client_id=${CLIENT_ID}" \
            --data-urlencode "client_secret=${CLIENT_SECRET}" \
            --data-urlencode "code=${CODE}" \
            --data-urlencode "redirect_uri=${REDIRECT_RAW}")"

          STATUS="$(echo "$RESP" | jq -r '.status // empty')"
          if [ "$STATUS" != "0" ]; then
            {
              echo "## Exchange Failed"
              echo ""
              echo "- Redirect used for exchange: \`${REDIRECT_RAW}\`"
              echo "- Common causes: redirect mismatch, reused/expired code."
              echo ""
              echo "**Raw response:**"
              echo ""
              echo '```json'
              echo "$RESP"
              echo '```'
            } >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi

          REFRESH="$(echo "$RESP" | jq -r '.body.refresh_token')"
          ACCESS="$(echo "$RESP" | jq -r '.body.access_token')"
          EXPIRES="$(echo "$RESP" | jq -r '.body.expires_in')"

          {
            echo "## ✅ Success - Save Your Refresh Token"
            echo ""
            echo "**WITHINGS_REFRESH_TOKEN (store this as a *secret* ideally):**"
            echo ""
            echo '```'
            echo "${REFRESH}"
            echo '```'
            echo ""
            echo "Optional:"
            echo "- Access token preview: \`${ACCESS:0:12}...\` (expires in ${EXPIRES}s)"
          } >> "$GITHUB_STEP_SUMMARY"
