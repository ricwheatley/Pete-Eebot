name: Withings OAuth Helper

on:
  workflow_dispatch:
    inputs:
      code:
        description: "Paste the ?code=... from your redirect page (leave blank to generate the auth URL)"
        required: false
        default: ""

permissions:
  contents: read

jobs:
  oauth:
    runs-on: ubuntu-latest
    steps:
      - name: Resolve repository variables
        id: res
        shell: bash
        env:
          VAR_CLIENT_ID:     ${{ vars.WITHINGS_CLIENT_ID_FOR_URL }}
          VAR_REDIRECT_URI:  ${{ vars.WITHINGS_REDIRECT_URI_FOR_URL }}
          VAR_CLIENT_SECRET: ${{ vars.WITHINGS_CLIENT_SECRET_FOR_EXCHANGE }}
        run: |
          set -euo pipefail
          if [ -z "${VAR_CLIENT_ID}" ] || [ -z "${VAR_REDIRECT_URI}" ]; then
            echo "Client ID or Redirect URI variable missing." >&2
            echo "Set repo variables:" >&2
            echo "  WITHINGS_CLIENT_ID_FOR_URL" >&2
            echo "  WITHINGS_REDIRECT_URI_FOR_URL (e.g. https://ricwheatley.github.io/fitness-oauth-bridge/ )" >&2
            exit 1
          fi
          REDIRECT_RAW="$(printf '%s' "$VAR_REDIRECT_URI" | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/^s:\/\//https:\/\//')"
          if ! echo "$REDIRECT_RAW" | grep -qi '^http'; then
            echo "Redirect must start with http/https. Got: $REDIRECT_RAW" >&2
            exit 1
          fi
          REDIRECT_ENC="$(python3 -c 'import urllib.parse,sys; print(urllib.parse.quote(sys.argv[1], safe=""))' "$REDIRECT_RAW")"
          {
            echo "client_id=$VAR_CLIENT_ID"
            echo "redirect_raw=$REDIRECT_RAW"
            echo "redirect_enc=$REDIRECT_ENC"
            echo "client_secret_set=$([ -n "$VAR_CLIENT_SECRET" ] && echo yes || echo no)"
            echo "client_secret=$VAR_CLIENT_SECRET"
          } >> "$GITHUB_OUTPUT"

      - name: Authorise or Exchange (vars only, robust)
        shell: bash
        env:
          CODE_RAW:        ${{ github.event.inputs.code }}
          CLIENT_ID:       ${{ steps.res.outputs.client_id }}
          REDIRECT_RAW:    ${{ steps.res.outputs.redirect_raw }}
          REDIRECT_ENC:    ${{ steps.res.outputs.redirect_enc }}
          CLIENT_SECRET:   ${{ steps.res.outputs.client_secret }}
          SECRET_SET:      ${{ steps.res.outputs.client_secret_set }}
        run: |
          set -euo pipefail

          SCOPES="user.metrics,user.activity,user.info"
          AUTH_URL="https://account.withings.com/oauth2_user/authorize2?response_type=code&client_id=${CLIENT_ID}&state=ric_state_123&scope=${SCOPES}&redirect_uri=${REDIRECT_ENC}"

          if [ -z "${CODE_RAW}" ]; then
            {
              echo "## Withings Authorisation"
              echo ""
              echo "- Client ID (link): \`${CLIENT_ID}\`"
              echo "- Redirect (exact): \`${REDIRECT_RAW}\`"
              echo "- Scopes: \`${SCOPES}\`"
              echo ""
              echo "Tap this link to authorise:"
              echo ""
              echo "<a href=\"${AUTH_URL}\">${AUTH_URL}</a>"
              echo ""
              echo "After approving, your redirect page shows a **code**."
              echo "Re-run this workflow immediately and paste that code into the input."
            } >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi

          if [ "${SECRET_SET}" != "yes" ]; then
            echo "WITHINGS_CLIENT_SECRET_FOR_EXCHANGE variable is required for token exchange." >&2
            exit 1
          fi

          # Sanitise the pasted code
          CODE="$(printf '%s' "$CODE_RAW" | tr -d '\r' | tr -d '"' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//')"
          if [ -z "$CODE" ]; then
            echo "No code provided after sanitising input." >&2
            exit 1
          fi

          echo "Exchanging code for tokens (vars only)…"
          sudo apt-get update -y >/dev/null
          sudo apt-get install -y jq >/dev/null

          # Capture HTTP details safely; never let jq kill the job
          BODY_FILE="$(mktemp)"
          HDR_FILE="$(mktemp)"
          HTTP_CODE="$(
            curl -sS -o "$BODY_FILE" -D "$HDR_FILE" -w "%{http_code}" \
              "https://wbsapi.withings.net/v2/oauth2" \
              --data-urlencode "action=requesttoken" \
              --data-urlencode "grant_type=authorization_code" \
              --data-urlencode "client_id=${CLIENT_ID}" \
              --data-urlencode "client_secret=${CLIENT_SECRET}" \
              --data-urlencode "code=${CODE}" \
              --data-urlencode "redirect_uri=${REDIRECT_RAW}"
          )" || true

          RAW_BODY="$(cat "$BODY_FILE")"
          RAW_HDRS="$(cat "$HDR_FILE")"

          # Try to parse JSON, but don't crash if it isn't JSON
          STATUS="$(echo "$RAW_BODY" | jq -r '.status // empty' 2>/dev/null || echo "")"

          if [ "$HTTP_CODE" != "200" ] || [ -z "$STATUS" ] || [ "$STATUS" != "0" ]; then
            {
              echo "## Exchange Failed"
              echo ""
              echo "- HTTP status: \`$HTTP_CODE\`"
              echo "- Redirect used for exchange: \`${REDIRECT_RAW}\`"
              echo "- Client ID used: \`${CLIENT_ID}\`"
              echo "- Code pasted: \`${CODE}\`"
              echo "- Code length: ${#CODE}"
              echo ""
              echo "**Response headers:**"
              echo ""
              echo '```'
              echo "$RAW_HDRS"
              echo '```'
              echo ""
              echo "**Response body (raw):**"
              echo ""
              echo '```'
              echo "$RAW_BODY"
              echo '```'
              echo ""
              echo "_Common causes: redirect mismatch, reused/expired code, scope not enabled, or temporary Withings outage._"
            } >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi

          # Success path
          REFRESH="$(echo "$RAW_BODY" | jq -r '.body.refresh_token' 2>/dev/null || echo "")"
          ACCESS="$(echo "$RAW_BODY" | jq -r '.body.access_token' 2>/dev/null || echo "")"
          EXPIRES="$(echo "$RAW_BODY" | jq -r '.body.expires_in' 2>/dev/null || echo "")"

          {
            echo "## ✅ Success - Save Your Refresh Token"
            echo ""
            echo "- Code exchanged successfully: \`${CODE}\`"
            echo ""
            echo "**WITHINGS_REFRESH_TOKEN (store this as a secret ideally):**"
            echo ""
            echo '```'
            echo "${REFRESH}"
            echo '```'
            echo ""
            echo "Optional:"
            echo "- Access token preview: \`${ACCESS:0:12}...\` (expires in ${EXPIRES}s)"
          } >> "$GITHUB_STEP_SUMMARY"
