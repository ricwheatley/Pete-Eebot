name: Withings OAuth Helper

on:
  workflow_dispatch:
    inputs:
      redirect_url:
        description: "Paste the FULL URL you land on after authorising (contains ?code=...)"
        required: false
        default: ""
      code:
        description: "Optional: paste only the code value (ignored if redirect_url provided)"
        required: false
        default: ""

permissions:
  contents: read

jobs:
  oauth:
    runs-on: ubuntu-latest
    env:
      CLIENT_ID:        ${{ vars.WITHINGS_CLIENT_ID }}
      REDIRECT_URI:     ${{ vars.WITHINGS_REDIRECT_URI }}
      CLIENT_SECRET:    ${{ secrets.WITHINGS_CLIENT_SECRET }}
      SCOPES:           user.metrics,user.activity   # keep it simple and allowed
    steps:
      - name: Validate variables and secret
        run: |
          set -euo pipefail
          if [ -z "${CLIENT_ID:-}" ] || [ -z "${REDIRECT_URI:-}" ]; then
            echo "## Missing repository Variables" > "$GITHUB_STEP_SUMMARY"
            echo "- Set WITHINGS_CLIENT_ID and WITHINGS_REDIRECT_URI under Settings → Actions → Variables." >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi
          if [ -z "${CLIENT_SECRET:-}" ]; then
            echo "## Missing repository Secret" > "$GITHUB_STEP_SUMMARY"
            echo "- Set WITHINGS_CLIENT_SECRET under Settings → Actions → Secrets." >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi
          # Tidy redirect (no whitespace, must start http/https)
          REDIRECT_URI_TRIM=$(printf '%s' "$REDIRECT_URI" | sed 's/^[[:space:]]*//; s/[[:space:]]*$//')
          if ! echo "$REDIRECT_URI_TRIM" | grep -qi '^http'; then
            echo "## Redirect looks invalid" > "$GITHUB_STEP_SUMMARY"
            echo "WITHINGS_REDIRECT_URI must start with http/https. Current: $REDIRECT_URI_TRIM" >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi
          echo "REDIRECT_URI_TRIM=$REDIRECT_URI_TRIM" >> "$GITHUB_ENV"

      - name: Authorise or exchange
        env:
          REDIRECT_URL_INPUT: ${{ github.event.inputs.redirect_url }}
          CODE_INPUT:         ${{ github.event.inputs.code }}
        run: |
          set -euo pipefail

          # Authorise link (Withings expects comma-separated scopes; redirect can be raw here)
          AUTH_URL="https://account.withings.com/oauth2_user/authorize2?response_type=code&client_id=${CLIENT_ID}&scope=${SCOPES}&redirect_uri=${REDIRECT_URI_TRIM}"

          if [ -z "${REDIRECT_URL_INPUT}" ] && [ -z "${CODE_INPUT}" ]; then
            {
              echo "## Withings Authorisation"
              echo
              echo "Tap this link to authorise your new app (Pete E.), then copy the FULL URL you land on:"
              echo
              echo "${AUTH_URL}"
              echo
              echo "Next, re-run this workflow and paste that full URL into the 'redirect_url' input."
            } >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi

          # Extract code from full redirect URL if provided
          CODE=""
          if [ -n "${REDIRECT_URL_INPUT}" ]; then
            CODE=$(printf '%s' "$REDIRECT_URL_INPUT" | sed -n 's/.*[?&]code=\([^&]*\).*/\1/p')
          fi
          if [ -z "$CODE" ] && [ -n "${CODE_INPUT}" ]; then
            CODE=$(printf '%s' "$CODE_INPUT" | tr -d '\r' | tr -d '"' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//')
          fi
          if [ -z "$CODE" ]; then
            echo "No code found. Paste the full redirect URL or the code value." >&2
            exit 1
          fi

          sudo apt-get update -y >/dev/null
          sudo apt-get install -y jq >/dev/null

          # Exchange code for tokens (v2 endpoint)
          BODY_FILE="$(mktemp)"
          HDR_FILE="$(mktemp)"
          HTTP_CODE="$(
            curl -sS -o "$BODY_FILE" -D "$HDR_FILE" -w "%{http_code}" \
              "https://wbsapi.withings.net/v2/oauth2" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              --data-urlencode action=requesttoken \
              --data-urlencode grant_type=authorization_code \
              --data-urlencode client_id="${CLIENT_ID}" \
              --data-urlencode client_secret="${CLIENT_SECRET}" \
              --data-urlencode code="${CODE}" \
              --data-urlencode redirect_uri="${REDIRECT_URI_TRIM}"
          )" || true

          RAW_BODY="$(cat "$BODY_FILE")"
          STATUS="$(printf '%s' "$RAW_BODY" | jq -r '.status // empty' 2>/dev/null || echo "")"

          if [ "$HTTP_CODE" != "200" ] || [ -z "$STATUS" ] || [ "$STATUS" != "0" ]; then
            {
              echo "## Token exchange failed"
              echo
              echo "HTTP: $HTTP_CODE"
              echo "Client ID: $CLIENT_ID"
              echo "Redirect: $REDIRECT_URI_TRIM"
              echo "Code length: ${#CODE}"
              echo
              echo "Raw response:"
              printf '%s\n' "$RAW_BODY" | jq . 2>/dev/null || printf '%s\n' "$RAW_BODY"
              echo
              echo "Hints:"
              echo "- Codes are single-use and expire quickly. Re-authorise and exchange immediately."
              echo "- Client secret or environment mismatch will make a fresh code look invalid."
              echo "- Redirect must match the app exactly, including trailing slash."
            } >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi

          REFRESH_TOKEN="$(printf '%s' "$RAW_BODY" | jq -r '.body.refresh_token // empty')"
          EXPIRES_IN="$(printf '%s' "$RAW_BODY" | jq -r '.body.expires_in // empty')"

          {
            echo "## Success – save your refresh token"
            echo
            echo "Create or update a Secret named WITHINGS_REFRESH_TOKEN with the value below:"
            echo
            echo '```'
            printf '%s\n' "$REFRESH_TOKEN"
            echo '```'
            echo
            echo "Access token TTL (seconds): ${EXPIRES_IN}"
          } >> "$GITHUB_STEP_SUMMARY"
