name: Withings OAuth Helper

on:
  workflow_dispatch:
    inputs:
      code:
        description: "Leave blank for auth link. Paste the code here to get your token."
        required: false

permissions:
  contents: read

jobs:
  oauth:
    runs-on: ubuntu-latest
    env:
      # ✅ Pull public config from Repository Variables (will not be masked)
      CLIENT_ID:    ${{ vars.WITHINGS_CLIENT_ID }}
      REDIRECT_URI: ${{ vars.WITHINGS_REDIRECT_URI }}
      
      # 🔒 Pull private credential from encrypted Secrets
      CLIENT_SECRET: ${{ secrets.WITHINGS_CLIENT_SECRET }}
      
      # User input from the workflow form
      CODE: ${{ github.event.inputs.code }}

    steps:
      - name: Generate Link or Exchange Code
        run: |
          set -euo pipefail
          
          # --- Mode 1: Generate the Authorisation Link ---
          if [ -z "$CODE" ]; then
            if [ -z "$CLIENT_ID" ] || [ -z "$REDIRECT_URI" ]; then
              echo "## ❌ Error: Missing Variables" > "$GITHUB_STEP_SUMMARY"
              echo "The repository variables \`WITHINGS_CLIENT_ID\` and \`WITHINGS_REDIRECT_URI\` must be set." >> "$GITHUB_STEP_SUMMARY"
              exit 1
            fi

            SCOPES="user.metrics,user.activity,user.info"
            REDIRECT_ENC=$(python3 -c "import urllib.parse; print(urllib.parse.quote('''$REDIRECT_URI''', safe=''))")
            AUTH_URL="https://account.withings.com/oauth2_user/authorize2?response_type=code&client_id=${CLIENT_ID}&state=github_actions&scope=${SCOPES}&redirect_uri=${REDIRECT_ENC}"

            {
              echo "## Withings Authorisation"
              echo ""
              echo "Tap the link below to authorise the application."
              echo ""
              echo "### Authorisation Link"
              echo "<a href=\"${AUTH_URL}\">${AUTH_URL}</a>"
              echo ""
              echo "**After authorising, re-run this workflow and paste the \`code\` from your browser into the input box.**"
            } >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi
          
          # --- Mode 2: Exchange the Code for a Token ---
          echo "Exchanging code for tokens..."

          if [ -z "$CLIENT_SECRET" ]; then
            echo "## ❌ Error: Missing Secret" > "$GITHUB_STEP_SUMMARY"
            echo "The secret \`WITHINGS_CLIENT_SECRET\` must be set to exchange the token." >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi

          sudo apt-get update -y >/dev/null && sudo apt-get install -y jq >/dev/null
          
          RESP=$(curl -sS -X POST "https://wbsapi.withings.net/v2/oauth2" \
            --data-urlencode "action=requesttoken" \
            --data-urlencode "grant_type=authorization_code" \
            --data-urlencode "client_id=${CLIENT_ID}" \
            --data-urlencode "client_secret=${CLIENT_SECRET}" \
            --data-urlencode "code=${CODE}" \
            --data-urlencode "redirect_uri=${REDIRECT_URI}")
            
          if [ "$(echo "$RESP" | jq -r '.status')" != "0" ]; then
            {
              echo "## ❌ Exchange Failed"
              echo "The API returned an error. Check the raw response below for details."
              echo '```json'
              echo "$RESP" | jq .
              echo '```'
            } >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi
          
          REFRESH_TOKEN=$(echo "$RESP" | jq -r '.body.refresh_token')
          {
            echo "## ✅ Success! Save Your Refresh Token"
            echo ""
            echo "Store this value as a new repository secret, for example \`WITHINGS_REFRESH_TOKEN\`."
            echo '```'
            echo "$REFRESH_TOKEN"
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"
